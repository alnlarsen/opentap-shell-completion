#compdef tap

_trace() {
  echo "$@" >> ~/tapcomp.log
}

_portable_get_real_dirname() {
  if [[ $(uname) == Darwin ]]; then
    # Mac uses BSD readlink which supports different flags

    # relativePath is empty if this is a regular file
    # Otherwise it is a relative path from the link to the real file
    foundPath="$1"
    relativePath="$(readlink "$foundPath")"
    # Keep looping until the file is resolved to a regular file
    while [[ "$relativePath" ]]; do
      # File is a link; follow it
      pushd "$(dirname "$foundPath")" >/dev/null
      pushd "$(dirname "$relativePath")" >/dev/null
      foundPath="$(pwd)/$(basename "$0")"
      popd >/dev/null
      popd >/dev/null
      relativePath="$(readlink "$foundPath")"
    done

    echo "$(dirname "$foundPath")"
  else
    # We are on linux -- Use GNU Readline normally
    echo "$(dirname "$(readlink -f "$(which "$1")")")"
  fi
}

_tap_complete_fn () {
  local IFS=$'\n'
  if [ ! -x "$1" ]; then
    # fail fast when $1 is not an executable
    return;
  fi

  local binary="$1"
  local tapdir="`_portable_get_real_dirname "$binary"`"
  local yqPath="$tapdir/Packages/ShellCompletion/yq"
  local cachePath="$tapdir/.tap-completions.json"

  shift 
  local args=($@)

  yq()
  {
    "${yqPath}" "$@"
  }

  if [ ! -x "$yqPath" ]; then 
    # We cannot do anything if jq is not installed. We cannot even give an error.
    # This is probably happening because the plugin is not installed.
    return;
  fi

  if [ ! -f "$cachePath" ]; then
    # if the cache does not exist it should be created
    "${binary}" completion regenerate > /dev/null
  fi

  local query="."
  for word in ${args[@]};
  do
    if [[ "$word" == -* ]]; then
      break;
    fi
    # Here we save the most immediate parent in $fallback in cases where e.g. an unnamed argument was specified
    # Without the fallback we would not be able to continue suggesting flags after e.g. 
    # tap package install CSV --!! or
    # tap run ./a.TapPlan --!!
    # This also means that currently we will keep suggesting invalid commands after 'tap tap tap tap -> package'
    # We could do more to validate the arguments here.
    query="$query | ( . as \$fallback | .Completions[] | select(.Name == \"$word\") | . // \$fallback )"
  done

  # the previous word on the line
  local previousWord="${args[$CURRENT-1]}"

  if [[ "$previousWord" == -* ]]; then
    local flagQuery="$query | .FlagCompletions[] | select (\"-\" + .ShortName == \"$previousWord\" or \"--\" + .LongName == \"$previousWord\") | [.Type, .SuggestedCompletions[]][]"
    local flagopts=($(yq "$flagQuery" "$cachePath"))

    # If the current flag is a bool, just continue since it requires no argument
    # otherwise we should only suggest completions for this flag and return
    if [ ! "$flagopts" = "System.Boolean" ]; then
      printf "%s\n" "${flagopts[@]:1}"
      if [[ "$flagopts" == *"System.String"* ]]; then
        return 1;
      fi
      return 0;
    fi
  fi

  local joinedDescription="( .Description // .Type |= sub(\"\n\", \" \") | \":\" + .Description // .Type )"
  local shortnameQuery="   ( .FlagCompletions[] | select(.ShortName != null ) | \"-\" + .ShortName + $joinedDescription ) "
  local longnameQuery="    ( .FlagCompletions[] | select(.LongName  != null ) | \"--\" + .LongName + $joinedDescription ) "
  local completionsQuery=" ( .Completions[] | .Name + $joinedDescription  ) "
  query="$query | ( .UnnamedCompletion.Type, $shortnameQuery , $longnameQuery , $completionsQuery ) "

  local candidates=($(yq "$query" "$cachePath"))
  printf "%s\n" "${candidates[@]:1:${#candidates[@]}}"

  if [[ "$candidates" == *"System.String"* ]]; then
    return 1;
  fi

  return 0;
}

_tap_hardcoded_commands () {
  return 1;
}

_tap_subcommands(){
  local binary="$words[1]"
  local line
  _arguments "*::args:->args"

  # First hardcode builtin commands
  # _tap_hardcoded_commands will return 0 if it has already suggested the appropriate files
  _tap_hardcoded_commands
  local suggestFiles=$?

  local relevant=(${${line[@]:0:$((CURRENT - 1))}})

  declare -a array_of_lines
  # _tap_complete_fn sets exit code to 1 if files should be suggested
  array_of_lines=($(_tap_complete_fn "$binary" ${relevant[@]}))
  local ret=$?
  if [ $suggestFiles = 1 ]; then
    suggestFiles=$ret
  fi

  # Avoid suggesting anything if the string is just whitespace
  if [[ "${array_of_lines[@]}" = *[![:space:]]* ]]; then
    _describe 'command' array_of_lines 
  fi

  if [ $suggestFiles = 1 ]; then
    _alternative "files:complete files:_files"
  fi
}

_tap(){
  words[1]="$(which "$words[1]" 2> /dev/null)"
  if [ ! -x "$words[1]" ]; then
    return
  fi

  local IFS=$'\n'

  _tap_subcommands
}

